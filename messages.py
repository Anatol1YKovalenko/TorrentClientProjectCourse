'''Модуль с функциями для работы с сообщениями, определенными в BitTorrent protocol'''

from struct import pack,unpack

'''
HandShake message:
    -----------------------------------------------------------------------------------------------------------------
    Назначение:
    -----------------------------------------------------------------------------------------------------------------
        Обязательное сообщение при первом подключении к пиру, после обмена ими устанавливается связь между пирами
    -----------------------------------------------------------------------------------------------------------------
    Вид:
    -----------------------------------------------------------------------------------------------------------------
        handshake: <pstrlen><pstr><reserved><info_hash><peer_id>
        pstr      -  имя протокола, значение определено однозначно : BitTorrent protocol
        prstlen   -  длина pstr, значение определено одозначно и равно 19
        reserved  -  8 нулевых байтов, каждый из этих байтов может быть использован для изменения поведения протокола
        info_hash -  info_hash, преобразован из торрента | отправленный в трекер
        peer_id   -  отправленный в трекер
    -----------------------------------------------------------------------------------------------------------------
    Общий размер сообщения и его действительной части:
    -----------------------------------------------------------------------------------------------------------------
        <pstrlen>    =  1 (byte)
        <pstr>       = 19 (byte)
        <reserved    =  8 (byte)
        <info_hash>  = 20 (byte)
        <peer_id>    = 20 (byte)
        ------------------------ +
        payload_length = total_length = 68 (byte)
    -----------------------------------------------------------------------------------------------------------------
'''
HANDSHAKE_PAYLOAD_LENGTH = HANDSHAKE_TOTAL_LENGTH = 68
HS_PSTR = b"BitTorrent protocol"
HS_PSTRLEN = len(HS_PSTR)

def handshake_msg_to_bytes(peer_id,info_hash):
    reserved = b'\x00' * 8
    return pack(f">B{HS_PSTRLEN}s8s20s20s",
                         HS_PSTRLEN,
                         HS_PSTR,
                         reserved,
                         info_hash,
                         peer_id)

def handshake_msg_from_bytes(payload,info_hash):
    pstrlen = unpack(">B",payload[:1])
    pstr,reserved,info_hash_chk,peer_id = unpack(f">{pstrlen}s8s20s20s",payload[1:HANDSHAKE_TOTAL_LENGTH])
    if pstr != HS_PSTR:
        raise Exception("Ошибка в названии протокола")
    if info_hash != info_hash_chk:
        raise Exception("info_hash пира не совпадает с исходным")
    return HANDSHAKE_PAYLOAD_LENGTH

'''
KeepAlive message:
    -----------------------------------------------------------------------------------------------------------------
    Назначение: 
    -----------------------------------------------------------------------------------------------------------------
        Если спустя некоторого времени пир не получает никаких сообщений от другого пира, он может оборвать соедение. 
        Это сообщение нужно для поддержания соединения в активном состоянии, если в течение заданного периода времени 
        не было отправлено ни одного сообщения.
    -----------------------------------------------------------------------------------------------------------------
    Вид:
    -----------------------------------------------------------------------------------------------------------------
        keep-alive: <len=0000>
        len = 0
    -----------------------------------------------------------------------------------------------------------------
    Общий размер сообщения и его действительной части:
    -----------------------------------------------------------------------------------------------------------------
        total_length = <len> = 4(byte)
        payload_length = 0
    -----------------------------------------------------------------------------------------------------------------
'''
KEEP_ALIVE_TOTAL_LENGTH = 4
KEEP_ALIVE_PAYLOAD_LENGTH = 0

def keep_alive_msg_from_bytes(payload):
    return name_msg_from_bytes_maker(payload,
                  KEEP_ALIVE_TOTAL_LENGTH,
                  KEEP_ALIVE_PAYLOAD_LENGTH,
                  None,
                  "Choke message")

'''
Choke message:
    -----------------------------------------------------------------------------------------------------------------
    Назначение:
    -----------------------------------------------------------------------------------------------------------------
        Сообщение о том, что пир не будет отправлять части
    -----------------------------------------------------------------------------------------------------------------
    Вид:
    -----------------------------------------------------------------------------------------------------------------
        choke: <len=0001><id=0>
        len - фиксированный 
        id  - 0
    -----------------------------------------------------------------------------------------------------------------
    Общий размер сообщения и его действительной части:
    -----------------------------------------------------------------------------------------------------------------
        len = 4 (byte)
        id  = 1 (byte)
        ------------------------ +
        payload_length = 1
        total_length   = 5
    -----------------------------------------------------------------------------------------------------------------
'''
CHOKE_TOTAL_LENGTH = 5
CHOKE_PAYLOAD_LENGTH = 5
CHOKE_MESSAGE_ID = 0

def choke_msg_from_bytes(payload):
    return name_msg_from_bytes_maker(payload,
                  CHOKE_TOTAL_LENGTH,
                  CHOKE_PAYLOAD_LENGTH,
                  CHOKE_MESSAGE_ID,
                  "Choke message")

'''
Unchoke message:
    -----------------------------------------------------------------------------------------------------------------
    Назначение:
    -----------------------------------------------------------------------------------------------------------------
        Сообщение о том, что пир начнет отправлять части
    -----------------------------------------------------------------------------------------------------------------
    Вид:
    -----------------------------------------------------------------------------------------------------------------
        choke: <len=0001><id=1>
        len - фиксированный 
        id  - 1
    -----------------------------------------------------------------------------------------------------------------
    Общий размер сообщения и его действительной части:
    -----------------------------------------------------------------------------------------------------------------
        аналогично с Choke
    -----------------------------------------------------------------------------------------------------------------
'''
UNCHOKE_TOTAL_LENGTH = 5
UNCHOKE_PAYLOAD_LENGTH = 5
UNCHOKE_MESSAGE_ID = 1

def unchoke_msg_from_bytes(payload):
    return name_msg_from_bytes_maker(payload,
                  UNCHOKE_TOTAL_LENGTH,
                  UNCHOKE_PAYLOAD_LENGTH,
                  UNCHOKE_MESSAGE_ID,
                  "Unchoke message")
'''
Interested message:
    -----------------------------------------------------------------------------------------------------------------
    Назначение:
    -----------------------------------------------------------------------------------------------------------------
        Сообщение о том, что пир заинтересован в обмене частями
    -----------------------------------------------------------------------------------------------------------------
    Вид:
    -----------------------------------------------------------------------------------------------------------------
        <len=0001><id=2>
        len - фиксированный 
        id  - 2
    -----------------------------------------------------------------------------------------------------------------
    Общий размер сообщения и его действительной части:
    -----------------------------------------------------------------------------------------------------------------
        аналогично с Choke
    -----------------------------------------------------------------------------------------------------------------
'''
INTERESTED_TOTAL_LENGTH = 5
INTERESTED_PAYLOAD_LENGTH = 5
INTERESTED_MESSAGE_ID = 1

def interseted_msg_from_bytes(payload):
    return name_msg_from_bytes_maker(payload,
                  INTERESTED_TOTAL_LENGTH,
                  INTERESTED_PAYLOAD_LENGTH,
                  INTERESTED_MESSAGE_ID,
                  "Interested message")

''''''
def name_msg_from_bytes_maker(payload,cons_total_length,cons_payload_length,cons_id,message_name):
    payload_length,message_id = unpack(">UB",payload[:cons_total_length])
    if (cons_id != None and message_id != cons_id) or cons_payload_length != payload_length :
        raise Exception(f"Принятое сообщение не \"{message_name}\"")
    return cons_payload_length



'''Определитель приходящих сообщений'''

#Каждое сообщение начинается с <len> | размер фиксированный - 4 байта 
LEN = 4

def determinator_of_messages(u_message):
    try:
        u_message_len,u_message_id = unpack(">IB")
    except Exception as e:
        print("Возникла ошибка в чтении сообщения")
        return None
    
    map_id_to_message = {
        0 : choke_msg_from_bytes,
        1 : unchoke_msg_from_bytes,
        2 : interseted_msg_from_bytes,
        3 : None,
        4 : None,
        5 : None,
        6 : None,
        7 : None,
        8 : None,
        9 : None
    }
    
    if u_message_id not in (list(map_id_to_message.keys())):
        raise Exception("Ошибка в определении id сообщения")
    
    return map_id_to_message[u_message_id](u_message)

